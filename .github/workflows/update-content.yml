name: Content Auto-Update

# --- 触发条件 ---
on:
  # 1. 定时执行: 使用CRON表达式，此处设置为“每小时的第0分钟”执行。
  schedule:
    - cron: '0 * * * *'
  # 2. 手动触发: 允许您在GitHub仓库的Actions页面手动启动此工作流。
  workflow_dispatch:

# --- 作业定义 ---
jobs:
  update-content:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出代码
      # 拉取您的仓库代码到工作流运行环境中。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置Python环境
      # 解决 "python: not found" 错误的关键步骤。
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' # 缓存pip依赖，加速后续运行

      # 步骤 3: 安装依赖库
      # 如果您的项目根目录有 requirements.txt 文件，此步骤会自动安装其中定义的库。
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, skipping dependency installation."
          fi

      # 步骤 4: 执行您的更新脚本
      # 使用已配置好的Python环境运行脚本。
      - name: Run content update script
        run: python ./scripts/update_time.py
        env:
          # 如果脚本需要API密钥等敏感信息，请先在仓库的 "Settings > Secrets and variables > Actions" 中配置
          # 然后在此处引用, 例如:
          # API_KEY: ${{ secrets.YOUR_API_KEY }}

      # 步骤 5: 提交并推送文件变更
      # 自动将脚本生成或修改的文件提交回仓库。
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A
          # 检查是否有文件变更，只有在有变更时才执行提交和推送
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            git commit -m "Automated content update by GitHub Actions"
            git push
          fi
